name: CI Orchestrator

on:
  push:
    branches: [ main, develop, ops/phase-1-foundation ]
  pull_request:
    branches: [ main, develop, ops/phase-1-foundation ]
  workflow_dispatch:

env:
  NODE_VERSION: '20.x'

jobs:
  ci-status:
    name: CI Status Dashboard
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Generate CI Status Report
        run: |
          cat > ci-status-report.md << 'EOF'
          # CI Pipeline Status Dashboard
          
          **Repository**: ${{ github.repository }}
          **Branch**: ${{ github.ref_name }}
          **Commit**: ${{ github.sha }}
          **Generated**: $(date -u +%Y-%m-%dT%H:%M:%SZ)
          
          ## CI Workflow Overview
          
          This repository uses a **multi-layered CI architecture** with specialized workflows for different concerns:
          
          ### 🚀 Core CI Pipeline
          - **File**: `.github/workflows/ci.yml`
          - **Purpose**: Primary CI with linting, testing, building
          - **Triggers**: Push to main/develop, weekly schedule
          - **Status**: ✅ Active
          
          ### 🛡️ Security Scanning
          - **File**: `.github/workflows/security-scanning.yml`
          - **Purpose**: CodeQL, Trivy, SBOM, compliance
          - **Triggers**: Push, PR, daily schedule
          - **Status**: ✅ Active
          
          ### ⚡ Performance & Optimization
          - **File**: `.github/workflows/performance-ci.yml`
          - **Purpose**: Lighthouse CI, bundle analysis, budgets
          - **Triggers**: Push, PR
          - **Status**: ✅ Active
          
          ### 🔧 Optimization & Caching
          - **File**: `.github/workflows/optimization-ci.yml`
          - **Purpose**: Build optimization, performance gates, caching
          - **Triggers**: Push, PR
          - **Status**: ✅ Active
          
          ### 🚨 Safety Gates
          - **File**: `.github/workflows/safety-gate.yml`
          - **Purpose**: Type checking, build validation, security audit
          - **Triggers**: Push, PR
          - **Status**: ✅ Active
          
          ### 📊 Weekly Checks
          - **File**: `.github/workflows/weekly-checks.yml`
          - **Purpose**: Dependency updates, slow type checking
          - **Triggers**: Weekly schedule, manual
          - **Status**: ✅ Active
          
          ## CI Architecture Benefits
          
          ### 🎯 **Separation of Concerns**
          - Each workflow focuses on specific aspects
          - Easier to maintain and debug
          - Parallel execution for faster feedback
          
          ### 🚀 **Performance Optimization**
          - Advanced caching strategies
          - Build optimization flags
          - Performance gates and budgets
          
          ### 🛡️ **Security First**
          - CodeQL static analysis
          - Trivy vulnerability scanning
          - SBOM generation and compliance
          
          ### 📈 **Monitoring & Reporting**
          - Comprehensive artifact collection
          - Performance trend analysis
          - Security compliance reporting
          
          ## Workflow Dependencies
          
          ```mermaid
          graph TD
              A[Push/PR] --> B[Core CI]
              A --> C[Security Scanning]
              A --> D[Performance CI]
              A --> E[Optimization CI]
              A --> F[Safety Gate]
              
              B --> G[CI Status Dashboard]
              C --> G
              D --> G
              E --> G
              F --> G
              
              H[Weekly Schedule] --> I[Weekly Checks]
              I --> G
          ```
          
          ## Performance Metrics
          
          | Metric | Target | Current | Status |
          |--------|--------|---------|--------|
          | Build Time | ≤5min | TBD | 🔄 Pending |
          | Bundle Size | ≤500KB | TBD | 🔄 Pending |
          | Security Scan | 0 Critical | TBD | 🔄 Pending |
          | Test Coverage | ≥80% | TBD | 🔄 Pending |
          
          ## Security Posture
          
          - **Static Analysis**: CodeQL with security-extended queries
          - **Vulnerability Scanning**: Trivy with CRITICAL/HIGH focus
          - **Dependency Audit**: npm audit with automated blocking
          - **SBOM Generation**: Complete dependency inventory
          - **Compliance Reporting**: Automated security status
          
          ## Next Steps
          
          - [ ] Monitor workflow execution times
          - [ ] Set up performance alerts
          - [ ] Configure security notifications
          - [ ] Optimize cache hit rates
          - [ ] Review and adjust performance gates
          
          ---
          
          *Generated by CI Orchestrator - ${{ github.workflow }}*
          EOF
      
      - name: Upload CI Status Report
        uses: actions/upload-artifact@v4
        with:
          name: ci-status-report
          path: ci-status-report.md
          retention-days: 30

  workflow-coordination:
    name: Workflow Coordination
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Workflow Health Check
        run: |
          echo "=== Workflow Health Check ==="
          
          # List all workflow files
          echo "Available CI Workflows:"
          ls -la .github/workflows/*.yml | while read file; do
            echo "  - $(basename "$file")"
          done
          
          echo ""
          echo "Workflow Configuration:"
          echo "- Total workflows: $(ls .github/workflows/*.yml | wc -l)"
          echo "- Main CI: ci.yml"
          echo "- Security: security-scanning.yml"
          echo "- Performance: performance-ci.yml"
          echo "- Optimization: optimization-ci.yml"
          echo "- Safety: safety-gate.yml"
          echo "- Weekly: weekly-checks.yml"
          echo "- Orchestrator: ci-orchestrator.yml"
          
          echo ""
          echo "=== Workflow Triggers ==="
          echo "Push/PR triggers: main, develop, ops/phase-1-foundation"
          echo "Schedule triggers: Weekly (Monday 2 AM UTC), Daily (2 AM UTC)"
          echo "Manual triggers: workflow_dispatch enabled for all"
          
          echo "================================"
      
      - name: Generate Workflow Matrix
        run: |
          cat > workflow-matrix.md << 'EOF'
          # CI Workflow Matrix
          
          ## Workflow Configuration Matrix
          
          | Workflow | Trigger | Branches | Schedule | Timeout | Purpose |
          |----------|---------|----------|----------|---------|---------|
          | ci.yml | Push/PR | main, develop | Weekly | 60min | Core CI pipeline |
          | security-scanning.yml | Push/PR | main, develop, ops/phase-1-foundation | Daily | 30min | Security scanning |
          | performance-ci.yml | Push/PR | main, develop, ops/phase-1-foundation | - | 30min | Performance testing |
          | optimization-ci.yml | Push/PR | main, develop, ops/phase-1-foundation | - | 30min | Build optimization |
          | safety-gate.yml | Push/PR | main, develop, oss-hero-main | - | 20min | Safety validation |
          | weekly-checks.yml | Schedule | - | Weekly | 15min | Maintenance tasks |
          | ci-orchestrator.yml | Push/PR | main, develop, ops/phase-1-foundation | - | 15min | Status coordination |
          
          ## Execution Strategy
          
          ### **Parallel Execution**
          - Core CI, Security, Performance, Optimization run in parallel
          - Safety Gate runs independently
          - Weekly checks run on schedule
          
          ### **Dependency Management**
          - No circular dependencies between workflows
          - Each workflow is self-contained
          - Orchestrator provides unified status
          
          ### **Resource Optimization**
          - Caching enabled across all workflows
          - Timeout limits prevent resource waste
          - Artifact sharing between related jobs
          
          ## Monitoring & Alerts
          
          - **Success Rate**: Track workflow success/failure rates
          - **Execution Time**: Monitor performance trends
          - **Resource Usage**: Track GitHub Actions minutes
          - **Cache Hit Rate**: Monitor caching effectiveness
          
          ## Maintenance Schedule
          
          - **Daily**: Security scanning and vulnerability checks
          - **Weekly**: Dependency updates and slow type checking
          - **On-demand**: Performance testing and optimization
          - **Continuous**: Core CI on every push/PR
          EOF
      
      - name: Upload Workflow Matrix
        uses: actions/upload-artifact@v4
        with:
          name: workflow-matrix
          path: workflow-matrix.md
          retention-days: 30
