name: Sentinel Branch Guard

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
  workflow_dispatch:

jobs:
  verify-branch-protection:
    name: Verify Branch Protection
    runs-on: ubuntu-latest
    outputs:
      status: ${{ steps.protection-check.outputs.status }}
      missing-checks: ${{ steps.protection-check.outputs.missing-checks }}
      missing-reviews: ${{ steps.protection-check.outputs.missing-reviews }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Check branch protection status
        id: protection-check
        run: |
          # Check if we have admin access to the repository
          if [[ "${{ github.token }}" == "${{ secrets.GITHUB_TOKEN }}" ]]; then
            echo "Using GITHUB_TOKEN - checking protection status..."
            
            # Get current branch protection rules
            PROTECTION_RESPONSE=$(gh api repos/${{ github.repository }}/branches/${{ github.base_ref }}/protection 2>/dev/null || echo "{}")
            
            # Check required reviews from CODEOWNERS
            if echo "$PROTECTION_RESPONSE" | jq -e '.required_pull_request_reviews.require_code_owner_reviews' >/dev/null 2>&1; then
              OWNER_REVIEWS=$(echo "$PROTECTION_RESPONSE" | jq -r '.required_pull_request_reviews.require_code_owner_reviews // false')
              if [[ "$OWNER_REVIEWS" == "true" ]]; then
                echo "‚úÖ CODEOWNERS reviews required"
                echo "missing-reviews=" >> $GITHUB_OUTPUT
              else
                echo "‚ùå CODEOWNERS reviews NOT required"
                echo "missing-reviews=CODEOWNERS" >> $GITHUB_OUTPUT
              fi
            else
              echo "‚ùå No branch protection rules found"
              echo "missing-reviews=CODEOWNERS" >> $GITHUB_OUTPUT
            fi
            
            # Check required status checks
            REQUIRED_CHECKS=$(echo "$PROTECTION_RESPONSE" | jq -r '.required_status_checks.checks[].context // empty' 2>/dev/null || echo "")
            MISSING_CHECKS=""
            
            for check in "sentinel-db" "sentinel-preview" "sentinel:check"; do
              if echo "$REQUIRED_CHECKS" | grep -q "$check"; then
                echo "‚úÖ Required check: $check"
              else
                echo "‚ùå Missing required check: $check"
                MISSING_CHECKS="$MISSING_CHECKS $check"
              fi
            done
            
            if [[ -n "$MISSING_CHECKS" ]]; then
              echo "missing-checks=$MISSING_CHECKS" >> $GITHUB_OUTPUT
              echo "status=FAIL" >> $GITHUB_OUTPUT
            else
              echo "missing-checks=" >> $GITHUB_OUTPUT
              echo "status=PASS" >> $GITHUB_OUTPUT
            fi
            
          else
            echo "‚ùå No admin access - protection verification required"
            echo "status=UNKNOWN" >> $GITHUB_OUTPUT
            echo "missing-checks=ALL" >> $GITHUB_OUTPUT
            echo "missing-reviews=CODEOWNERS" >> $GITHUB_OUTPUT
          fi
        env:
          GH_TOKEN: ${{ github.token }}
          
      - name: Comment on PR if protection missing
        if: steps.protection-check.outputs.status == 'FAIL' || steps.protection-check.outputs.status == 'UNKNOWN'
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });
            
            const hasComment = comments.some(comment => 
              comment.body.includes('üö® Branch Protection Required')
            );
            
            if (!hasComment) {
              const missingChecks = '${{ steps.protection-check.outputs.missing-checks }}';
              const missingReviews = '${{ steps.protection-check.outputs.missing-reviews }}';
              
              let message = 'üö® **Branch Protection Required**\n\n';
              message += 'This PR touches sensitive paths that require branch protection.\n\n';
              
              if (missingReviews) {
                message += '**Missing:** CODEOWNERS review requirement\n';
              }
              
              if (missingChecks && missingChecks !== 'ALL') {
                message += `**Missing required checks:** ${missingChecks}\n`;
              } else if (missingChecks === 'ALL') {
                message += '**Missing all required checks:** sentinel-db, sentinel-preview, sentinel:check\n';
              }
              
              message += '\n**To enable protection, run these commands:**\n';
              message += '```bash\n';
              message += '# Enable CODEOWNERS reviews\n';
              message += 'gh api repos/${{ github.repository }}/branches/${{ github.base_ref }}/protection/required_pull_request_reviews \\\n';
              message += '  --method PUT \\\n';
              message += '  --field require_code_owner_reviews=true \\\n';
              message += '  --field required_approving_review_count=1\n\n';
              message += '# Enable required status checks\n';
              message += 'gh api repos/${{ github.repository }}/branches/${{ github.base_ref }}/protection/required_status_checks \\\n';
              message += '  --method PUT \\\n';
              message += '  --field strict=true \\\n';
              message += '  --field contexts[]=sentinel-db \\\n';
              message += '  --field contexts[]=sentinel-preview \\\n';
              message += '  --field contexts[]=sentinel:check\n';
              message += '```\n\n';
              message += '**Or enable via GitHub UI:**\n';
              message += '1. Go to Settings ‚Üí Branches ‚Üí Branch protection rules\n';
              message += '2. Add rule for `${{ github.base_ref }}`\n';
              message += '3. Check "Require a pull request before merging"\n';
              message += '4. Check "Require review from code owners"\n';
              message += '5. Add required status checks: sentinel-db, sentinel-preview, sentinel:check';
              
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: message
              });
            }
            
      - name: Fail if protection missing
        if: steps.protection-check.outputs.status == 'FAIL' || steps.protection-check.outputs.status == 'UNKNOWN'
        run: |
          echo "‚ùå Branch protection requirements not met"
          echo "This PR cannot merge until protection is enabled"
          exit 1

  sentinel-check:
    name: Sentinel Check
    runs-on: ubuntu-latest
    needs: verify-branch-protection
    if: needs.verify-branch-protection.outputs.status == 'PASS'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run sentinel check
        id: sentinel-check
        run: npm run sentinel:check
        
      - name: Generate Change Journal Entry
        if: always()
        env:
          GITHUB_ACTOR: ${{ github.actor }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_RUN_ID: ${{ github.run_id }}
        run: |
          echo "üóÇÔ∏è Generating Change Journal entry for sentinel check..."
          npx tsx scripts/sentinel-report.ts
          
      - name: Upload Change Journal Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: sentinel-artifacts
          path: |
            .sentinel/journal/
        
      - name: Comment result on PR
        uses: actions/github-script@v7
        if: always()
        with:
          script: |
            const exitCode = ${{ steps.sentinel-check.outputs.exitCode || 0 }};
            const status = exitCode === 0 ? '‚úÖ' : '‚ùå';
            
            // Try to read the Change Journal markdown file
            let journalContent = '';
            try {
              const fs = require('fs');
              const path = require('path');
              const journalDir = path.join(process.cwd(), '.sentinel', 'journal');
              const files = fs.readdirSync(journalDir);
              const mdFile = files.find(f => f.endsWith('.md'));
              if (mdFile) {
                journalContent = fs.readFileSync(path.join(journalDir, mdFile), 'utf8');
              }
            } catch (error) {
              console.log('Could not read Change Journal file:', error.message);
            }
            
            // Create or update the PR comment
            const { data: comments } = await github.rest.issues.listComments({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            
            // Look for existing Sentinel comment
            const existingComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('üõ°Ô∏è Sentinel Gate ‚Äî Decision & Evidence')
            );
            
            const commentBody = journalContent || `${status} **Sentinel Check Result**\n\n${
              exitCode === 0 
                ? '**Sentinel check passed** - All security and quality checks completed successfully.'
                : '**Sentinel check failed** - Please review the logs and fix any issues before merging.'
            }`;
            
            if (existingComment) {
              await github.rest.issues.updateComment({
                comment_id: existingComment.id,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: commentBody,
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: commentBody,
              });
            }
