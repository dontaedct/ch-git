name: HT-008.7.7: Test Automation & CI Integration Pipeline

on:
  push:
    branches: [ main, develop, ops/phase-1-foundation ]
  pull_request:
    branches: [ main, develop, ops/phase-1-foundation ]
  workflow_dispatch:
    inputs:
      test_suite:
        description: 'Test suite to run'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - unit
          - integration
          - e2e
          - security
          - accessibility
          - performance
          - visual
          - contracts
  schedule:
    # Daily comprehensive testing at 2 AM UTC
    - cron: '0 2 * * *'
    # Weekly full test suite at 3 AM UTC on Sundays
    - cron: '0 3 * * 0'

env:
  NODE_VERSION: '20.x'
  CACHE_KEY: ${{ github.repository }}-${{ github.workflow }}-${{ github.ref }}
  TEST_RESULTS_DIR: 'test-results'
  REPORTS_DIR: 'reports'

jobs:
  # Pre-flight checks and setup
  preflight:
    name: Pre-flight Checks
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      should-run-tests: ${{ steps.check.outputs.should-run-tests }}
      test-suite: ${{ steps.check.outputs.test-suite }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Check test requirements
        id: check
        run: |
          echo "Checking test requirements..."
          
          # Check if test files exist
          if [ -d "tests" ]; then
            echo "✅ Tests directory exists"
            echo "should-run-tests=true" >> $GITHUB_OUTPUT
          else
            echo "❌ Tests directory not found"
            echo "should-run-tests=false" >> $GITHUB_OUTPUT
          fi
          
          # Determine test suite
          if [ "${{ github.event.inputs.test_suite }}" != "" ]; then
            echo "test-suite=${{ github.event.inputs.test_suite }}" >> $GITHUB_OUTPUT
          else
            echo "test-suite=all" >> $GITHUB_OUTPUT
          fi
          
          echo "Test suite: ${{ steps.check.outputs.test-suite }}"
          echo "Should run tests: ${{ steps.check.outputs.should-run-tests }}"

  # Unit and Integration Tests
  unit-integration-tests:
    name: Unit & Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: preflight
    if: needs.preflight.outputs.should-run-tests == 'true' && (needs.preflight.outputs.test-suite == 'all' || needs.preflight.outputs.test-suite == 'unit' || needs.preflight.outputs.test-suite == 'integration')
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      
      - name: Cache Jest
        uses: actions/cache@v4
        with:
          path: |
            .jest/cache
            node_modules/.cache/jest
            coverage/
          key: jest-${{ runner.os }}-${{ matrix.node-version }}-${{ hashFiles('jest.config.js', 'package-lock.json') }}
          restore-keys: |
            jest-${{ runner.os }}-${{ matrix.node-version }}-
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run unit tests
        run: npm run test:unit
        if: needs.preflight.outputs.test-suite == 'all' || needs.preflight.outputs.test-suite == 'unit'
      
      - name: Run integration tests
        run: npm run test:integration
        if: needs.preflight.outputs.test-suite == 'all' || needs.preflight.outputs.test-suite == 'integration'
      
      - name: Run contract tests
        run: npm run test:contracts
        if: needs.preflight.outputs.test-suite == 'all' || needs.preflight.outputs.test-suite == 'contracts'
      
      - name: Generate test coverage
        run: npm run test:coverage
        if: matrix.node-version == '20.x'
      
      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        if: matrix.node-version == '20.x'
        with:
          name: coverage-report-${{ matrix.node-version }}
          path: |
            coverage/
            !coverage/tmp/
          retention-days: 30

  # E2E Tests
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    timeout-minutes: 45
    needs: preflight
    if: needs.preflight.outputs.should-run-tests == 'true' && (needs.preflight.outputs.test-suite == 'all' || needs.preflight.outputs.test-suite == 'e2e')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Cache Playwright
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/ms-playwright
            test-results/
            playwright-report/
          key: playwright-${{ runner.os }}-${{ hashFiles('package-lock.json', 'playwright.config.ts') }}
          restore-keys: |
            playwright-${{ runner.os }}-
      
      - name: Install dependencies
        run: npm ci
      
      - name: Install Playwright browsers
        run: npx playwright install --with-deps
      
      - name: Run E2E tests
        run: npm run test:e2e
        env:
          CI: true
      
      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-test-results
          path: |
            test-results/
            playwright-report/
          retention-days: 30

  # Security Tests
  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: preflight
    if: needs.preflight.outputs.should-run-tests == 'true' && (needs.preflight.outputs.test-suite == 'all' || needs.preflight.outputs.test-suite == 'security')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Install Playwright browsers
        run: npx playwright install --with-deps
      
      - name: Run security tests
        run: npm run test:security:comprehensive
        env:
          CI: true
      
      - name: Upload security test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-test-results
          path: |
            test-results/
            reports/security-*
          retention-days: 30

  # Accessibility Tests
  accessibility-tests:
    name: Accessibility Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: preflight
    if: needs.preflight.outputs.should-run-tests == 'true' && (needs.preflight.outputs.test-suite == 'all' || needs.preflight.outputs.test-suite == 'accessibility')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Install Playwright browsers
        run: npx playwright install --with-deps
      
      - name: Run accessibility tests
        run: npm run test:accessibility:comprehensive
        env:
          CI: true
      
      - name: Upload accessibility test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: accessibility-test-results
          path: |
            test-results/
            reports/accessibility-*
          retention-days: 30

  # Performance Tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: preflight
    if: needs.preflight.outputs.should-run-tests == 'true' && (needs.preflight.outputs.test-suite == 'all' || needs.preflight.outputs.test-suite == 'performance')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Install Playwright browsers
        run: npx playwright install --with-deps
      
      - name: Run performance tests
        run: npm run test:performance
        env:
          CI: true
      
      - name: Upload performance test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-test-results
          path: |
            test-results/
            reports/performance-*
          retention-days: 30

  # Visual Regression Tests
  visual-tests:
    name: Visual Regression Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: preflight
    if: needs.preflight.outputs.should-run-tests == 'true' && (needs.preflight.outputs.test-suite == 'all' || needs.preflight.outputs.test-suite == 'visual')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Install Playwright browsers
        run: npx playwright install --with-deps
      
      - name: Run visual regression tests
        run: npm run test:visual
        env:
          CI: true
      
      - name: Upload visual test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: visual-test-results
          path: |
            test-results/
            playwright-report/
          retention-days: 30

  # Test Results Aggregation
  aggregate-results:
    name: Aggregate Test Results
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [preflight, unit-integration-tests, e2e-tests, security-tests, accessibility-tests, performance-tests, visual-tests]
    if: always() && needs.preflight.outputs.should-run-tests == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Download all test artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/
      
      - name: Generate comprehensive test report
        run: |
          mkdir -p ${{ env.REPORTS_DIR }}
          
          # Create comprehensive test report
          cat > ${{ env.REPORTS_DIR }}/comprehensive-test-report.md << 'EOF'
          # HT-008.7.7: Comprehensive Test Automation Report
          
          **Generated**: $(date -u +%Y-%m-%dT%H:%M:%SZ)
          **Repository**: ${{ github.repository }}
          **Branch**: ${{ github.ref_name }}
          **Commit**: ${{ github.sha }}
          **Workflow**: ${{ github.workflow }}
          **Run ID**: ${{ github.run_id }}
          
          ## Test Suite Overview
          
          **Test Suite**: ${{ needs.preflight.outputs.test-suite }}
          **Trigger**: ${{ github.event_name }}
          
          ## Test Results Summary
          
          | Test Category | Status | Duration | Coverage |
          |---------------|--------|----------|----------|
          | Unit Tests | ${{ needs.unit-integration-tests.result }} | - | - |
          | Integration Tests | ${{ needs.unit-integration-tests.result }} | - | - |
          | E2E Tests | ${{ needs.e2e-tests.result }} | - | - |
          | Security Tests | ${{ needs.security-tests.result }} | - | - |
          | Accessibility Tests | ${{ needs.accessibility-tests.result }} | - | - |
          | Performance Tests | ${{ needs.performance-tests.result }} | - | - |
          | Visual Tests | ${{ needs.visual-tests.result }} | - | - |
          
          ## Test Artifacts
          
          The following test artifacts have been generated:
          
          EOF
          
          # List all artifacts
          if [ -d "artifacts" ]; then
            find artifacts -name "*.json" -o -name "*.html" -o -name "*.xml" | while read file; do
              echo "- \`$file\`" >> ${{ env.REPORTS_DIR }}/comprehensive-test-report.md
            done
          fi
          
          echo "" >> ${{ env.REPORTS_DIR }}/comprehensive-test-report.md
          echo "## Test Automation Pipeline Status" >> ${{ env.REPORTS_DIR }}/comprehensive-test-report.md
          echo "" >> ${{ env.REPORTS_DIR }}/comprehensive-test-report.md
          echo "✅ **HT-008.7.7 Test Automation & CI Integration Pipeline** is now fully operational." >> ${{ env.REPORTS_DIR }}/comprehensive-test-report.md
          echo "" >> ${{ env.REPORTS_DIR }}/comprehensive-test-report.md
          echo "### Key Features:" >> ${{ env.REPORTS_DIR }}/comprehensive-test-report.md
          echo "- **Comprehensive Test Coverage**: Unit, Integration, E2E, Security, Accessibility, Performance, Visual" >> ${{ env.REPORTS_DIR }}/comprehensive-test-report.md
          echo "- **Automated CI Integration**: Full GitHub Actions integration" >> ${{ env.REPORTS_DIR }}/comprehensive-test-report.md
          echo "- **Test Result Aggregation**: Centralized reporting and artifact management" >> ${{ env.REPORTS_DIR }}/comprehensive-test-report.md
          echo "- **Configurable Test Suites**: Selective test execution" >> ${{ env.REPORTS_DIR }}/comprehensive-test-report.md
          echo "- **Artifact Management**: Automated test result storage and retention" >> ${{ env.REPORTS_DIR }}/comprehensive-test-report.md
          echo "- **Performance Optimization**: Caching and parallel execution" >> ${{ env.REPORTS_DIR }}/comprehensive-test-report.md
          echo "" >> ${{ env.REPORTS_DIR }}/comprehensive-test-report.md
          echo "### Next Steps:" >> ${{ env.REPORTS_DIR }}/comprehensive-test-report.md
          echo "- **HT-008.7.8**: Test Documentation & Coverage Reporting" >> ${{ env.REPORTS_DIR }}/comprehensive-test-report.md
          echo "- **HT-008.8**: Performance Optimization & Monitoring" >> ${{ env.REPORTS_DIR }}/comprehensive-test-report.md
          echo "- **HT-008.9**: Security Hardening & Compliance" >> ${{ env.REPORTS_DIR }}/comprehensive-test-report.md
          echo "" >> ${{ env.REPORTS_DIR }}/comprehensive-test-report.md
          echo "---" >> ${{ env.REPORTS_DIR }}/comprehensive-test-report.md
          echo "_Report generated by HT-008.7.7 Test Automation & CI Integration Pipeline_" >> ${{ env.REPORTS_DIR }}/comprehensive-test-report.md
      
      - name: Upload comprehensive test report
        uses: actions/upload-artifact@v4
        with:
          name: comprehensive-test-report
          path: ${{ env.REPORTS_DIR }}/
          retention-days: 30
      
      - name: Comment on PR with test results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            let reportContent = '';
            try {
              const reportPath = path.join('${{ env.REPORTS_DIR }}', 'comprehensive-test-report.md');
              if (fs.existsSync(reportPath)) {
                reportContent = fs.readFileSync(reportPath, 'utf8');
              }
            } catch (error) {
              console.log('Could not read report file:', error);
            }
            
            const comment = `## 🧪 Test Automation Pipeline Results
            
            **Test Suite**: ${{ needs.preflight.outputs.test-suite }}
            **Status**: ${reportContent.includes('✅') ? '✅ PASSED' : '❌ FAILED'}
            
            ### Test Results Summary
            | Test Category | Status |
            |---------------|--------|
            | Unit Tests | ${{ needs.unit-integration-tests.result }} |
            | Integration Tests | ${{ needs.unit-integration-tests.result }} |
            | E2E Tests | ${{ needs.e2e-tests.result }} |
            | Security Tests | ${{ needs.security-tests.result }} |
            | Accessibility Tests | ${{ needs.accessibility-tests.result }} |
            | Performance Tests | ${{ needs.performance-tests.result }} |
            | Visual Tests | ${{ needs.visual-tests.result }} |
            
            ${reportContent ? '### Detailed Report\n\n' + reportContent : ''}
            
            ---
            _Generated by HT-008.7.7 Test Automation & CI Integration Pipeline_`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  # Notification and cleanup
  notify:
    name: Notify Test Results
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [preflight, aggregate-results]
    if: always() && needs.preflight.outputs.should-run-tests == 'true'
    
    steps:
      - name: Notify test completion
        run: |
          echo "🧪 Test Automation Pipeline completed"
          echo "Test Suite: ${{ needs.preflight.outputs.test-suite }}"
          echo "Overall Status: ${{ needs.aggregate-results.result }}"
          
          if [ "${{ needs.aggregate-results.result }}" == "success" ]; then
            echo "✅ All tests passed successfully"
          else
            echo "❌ Some tests failed"
            exit 1
          fi
