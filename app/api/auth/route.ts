
/**
 * Authentication API Route
 * Generated by Cursor AI
 * 
 * Handles authentication operations including user validation and session management
 * Uses existing auth guard functions for user operations
 * 
 * Generated at: [RELATIVE: 7 months from now]
 */

import { NextResponse } from 'next/server';
import { createRealSupabaseClient } from '@/lib/supabase/server-stub';

export async function GET(_req: Request) {
  try {
    const supabase = await createRealSupabaseClient();
    
    // Get current user directly from Supabase
    const result = await supabase.auth.getUser();
    
    if (result.error || !result.data?.user) {
      return NextResponse.json({ ok: false, error: 'Not authenticated' }, { status: 401 });
    }
    
    return NextResponse.json({ ok: true, user: result.data.user });
  } catch (err: unknown) {
    const errorMessage = err instanceof Error ? err.message : 'Unknown error occurred';
    return NextResponse.json({ ok: false, error: errorMessage }, { status: 401 });
  }
}

export async function POST(req: Request) {
  try {
    const supabase = await createRealSupabaseClient();
    
    const body = await req.json();
    const { email, password } = body;
    
    if (!email || !password) {
      return NextResponse.json({ ok: false, error: 'Email and password required' }, { status: 400 });
    }
    
    // Sign in user
    const result = await supabase.auth.signInWithPassword({
      email,
      password,
    });
    
    if (result.error) {
      const errorMessage = typeof result.error === 'object' && result.error !== null && 'message' in result.error 
        ? String(result.error.message) 
        : 'Authentication failed';
      return NextResponse.json({ ok: false, error: errorMessage }, { status: 400 });
    }
    
    return NextResponse.json({ ok: true, user: result.data?.user, session: result.data?.session });
  } catch (err: unknown) {
    const errorMessage = err instanceof Error ? err.message : 'Unknown error occurred';
    return NextResponse.json({ ok: false, error: errorMessage }, { status: 400 });
  }
}

export async function DELETE(_req: Request) {
  try {
    const supabase = await createRealSupabaseClient();
    
    // Sign out user
    const result = await supabase.auth.signOut();
    
    if (result.error) {
      const errorMessage = typeof result.error === 'object' && result.error !== null && 'message' in result.error 
        ? String(result.error.message) 
        : 'Sign out failed';
      return NextResponse.json({ ok: false, error: errorMessage }, { status: 400 });
    }
    
    return NextResponse.json({ ok: true, message: 'User signed out successfully' });
  } catch (err: unknown) {
    const errorMessage = err instanceof Error ? err.message : 'Unknown error occurred';
    return NextResponse.json({ ok: false, error: errorMessage }, { status: 400 });
  }
}
