/**
 * Clients API Route
 * Generated by Cursor AI
 * 
 * Handles CRUD operations for clients including creation, updates, and retrieval
 * Uses existing clients.repo functions for data operations
 * 
 * Generated at: 2025-01-27
 */

import { NextResponse } from 'next/server';
import { 
  upsertClient, 
  getClient, 
  listClients,
  updateClient,
  deleteClient
} from '@/data/clients.repo';
import { createRealSupabaseClient } from '@/lib/supabase/server';

// Prevent prerendering - this route must be dynamic
export const dynamic = 'force-dynamic';
export const revalidate = 0;

export async function POST(req: Request) {
  try {
    const supabase = await createRealSupabaseClient();
    
    // Get user from Supabase directly
    const { data: { user }, error: authError } = await supabase.auth.getUser();
    if (authError || !user) {
      return NextResponse.json({ ok: false, error: 'Not authenticated' }, { status: 401 });
    }
    
    const body = await req.json();
    const data = await upsertClient(supabase, user, body);
    return NextResponse.json({ ok: true, data });
  } catch (err: unknown) {
    const errorMessage = err instanceof Error ? err.message : 'Unknown error occurred';
    return NextResponse.json({ ok: false, error: errorMessage }, { status: 400 });
  }
}

export async function GET(req: Request) {
  try {
    const supabase = await createRealSupabaseClient();
    
    const { searchParams } = new URL(req.url);
    const id = searchParams.get('id');
    
    if (id) {
      // Get specific client by ID
      const data = await getClient(supabase, id);
      return NextResponse.json({ ok: true, data });
    }
    
    // List all clients for the authenticated user
    const { data: { user }, error: authError } = await supabase.auth.getUser();
    if (authError || !user) {
      return NextResponse.json({ ok: false, error: 'Not authenticated' }, { status: 401 });
    }
    
    const data = await listClients(supabase, user);
    return NextResponse.json({ ok: true, data });
  } catch (err: unknown) {
    const errorMessage = err instanceof Error ? err.message : 'Unknown error occurred';
    return NextResponse.json({ ok: false, error: errorMessage }, { status: 400 });
  }
}

export async function PUT(req: Request) {
  try {
    const supabase = await createRealSupabaseClient();
    
    const { data: { user }, error: authError } = await supabase.auth.getUser();
    if (authError || !user) {
      return NextResponse.json({ ok: false, error: 'Not authenticated' }, { status: 401 });
    }
    
    const { searchParams } = new URL(req.url);
    const id = searchParams.get('id');
    
    if (!id) {
      return NextResponse.json({ ok: false, error: 'id required' }, { status: 400 });
    }
    
    const body = await req.json();
    const data = await updateClient(supabase, user, id, body);
    return NextResponse.json({ ok: true, data });
  } catch (err: unknown) {
    const errorMessage = err instanceof Error ? err.message : 'Unknown error occurred';
    return NextResponse.json({ ok: false, error: errorMessage }, { status: 400 });
  }
}

export async function DELETE(req: Request) {
  try {
    const supabase = await createRealSupabaseClient();
    
    const { data: { user }, error: authError } = await supabase.auth.getUser();
    if (authError || !user) {
      return NextResponse.json({ ok: false, error: 'Not authenticated' }, { status: 401 });
    }
    
    const { searchParams } = new URL(req.url);
    const id = searchParams.get('id');
    
    if (!id) {
      return NextResponse.json({ ok: false, error: 'id required' }, { status: 400 });
    }
    
    await deleteClient(supabase, user, id);
    return NextResponse.json({ ok: true, message: 'Client deleted' });
  } catch (err: unknown) {
    const errorMessage = err instanceof Error ? err.message : 'Unknown error occurred';
    return NextResponse.json({ ok: false, error: errorMessage }, { status: 400 });
  }
}

