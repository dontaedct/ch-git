
/**
 * Progress Metrics API Route
 * Generated by Cursor AI
 * 
 * Handles CRUD operations for progress metrics including weight, body fat, muscle mass tracking
 * Uses existing progress-metrics.repo functions for data operations
 * Enhanced with Hero System improvements: rate limiting, audit logging, and performance monitoring
 * 
 * Generated at: [RELATIVE: 7 months from now]
 */

import { NextResponse } from 'next/server';
import { 
  upsertProgressMetric, 
  getProgressMetric, 
  listClientProgressMetrics,
  getProgressMetricById,
  updateProgressMetric,
  deleteProgressMetric
} from '@/data/progress-metrics.repo';
import { createRealSupabaseClient } from '@/lib/supabase/server';
import { withRateLimit } from '@/lib/rate-limiter';
import { withAuditLog, auditLogger, AuditEventType, AuditSeverity } from '@/lib/audit-logger';
import { withPerformanceMonitoring, withCache } from '@/lib/performance-monitor';

// Prevent prerendering - this route must be dynamic
export const dynamic = 'force-dynamic';
export const revalidate = 0;

// Enhanced POST handler with all Hero System improvements
async function POSTHandler(req: Request) {
  try {
    const supabase = await createRealSupabaseClient();
    
    // Get user from Supabase directly
    const { data: { user }, error: authError } = await supabase.auth.getUser();
    if (authError || !user) {
      return NextResponse.json({ ok: false, error: 'Not authenticated' }, { status: 401 });
    }
    
    const body = await req.json();
    const data = await upsertProgressMetric(supabase, user, body);
    
    // Log successful data creation
    auditLogger.logDataOperation(
      AuditEventType.DATA_CREATE,
      user.id,
      user.email ?? 'unknown',
      'progress_metric',
      data.id,
      'create',
      { input: body, result: data }
    );
    
    return NextResponse.json({ ok: true, data });
  } catch (err: unknown) {
    const errorMessage = err instanceof Error ? err.message : 'Unknown error occurred';
    
    // Log failed operation
    auditLogger.logSecurityEvent(
      AuditEventType.API_ERROR,
      AuditSeverity.HIGH,
      undefined,
      undefined,
      { endpoint: '/api/progress-metrics', method: 'POST', error: errorMessage }
    );
    
    return NextResponse.json({ ok: false, error: errorMessage }, { status: 400 });
  }
}

// Enhanced GET handler with caching and all improvements
async function GETHandler(req: Request) {
  try {
    const supabase = await createRealSupabaseClient();
    
    const { searchParams } = new URL(req.url);
    const client_id = searchParams.get('client_id');
    const date = searchParams.get('date');
    const days = searchParams.get('days');
    const id = searchParams.get('id');
    
    if (id) {
      // Get specific metric by ID
      const { data: { user }, error: authError } = await supabase.auth.getUser();
      if (authError || !user) {
        return NextResponse.json({ ok: false, error: 'Not authenticated' }, { status: 401 });
      }
      
      const data = await getProgressMetricById(supabase, user, id);
      
      // Log data access
      auditLogger.logDataOperation(
        AuditEventType.DATA_READ,
        user.id,
        user.email ?? 'unknown',
        'progress_metric',
        id,
        'read_by_id'
      );
      
      return NextResponse.json({ ok: true, data });
    }
    
    if (!client_id) {
      return NextResponse.json({ ok: false, error: 'client_id required' }, { status: 400 });
    }
    
    if (date) {
      // Get metric for specific date with caching
      const cacheKey = `progress_metric_${client_id}_${date}`;
      const data = await withCache(cacheKey, 5 * 60 * 1000)(() => 
        getProgressMetric(supabase, client_id, date)
      )();
      
      // Log data access
      auditLogger.logDataOperation(
        AuditEventType.DATA_READ,
        'system',
        'system',
        'progress_metric',
        client_id,
        'read_by_date',
        { date }
      );
      
      return NextResponse.json({ ok: true, data });
    }
    
    // List metrics for client over specified days with caching
    const daysCount = days ? parseInt(days) : 30;
    const cacheKey = `progress_metrics_${client_id}_${daysCount}`;
    const data = await withCache(cacheKey, 10 * 60 * 1000)(() => 
      listClientProgressMetrics(supabase, client_id, daysCount)
    )();
    
    // Log data access
    auditLogger.logDataOperation(
      AuditEventType.DATA_READ,
      'system',
      'system',
      'progress_metric',
      client_id,
      'read_by_days',
      { days: daysCount, count: (data as unknown[]).length }
    );
    
    return NextResponse.json({ ok: true, data });
  } catch (err: unknown) {
    const errorMessage = err instanceof Error ? err.message : 'Unknown error occurred';
    
    // Log failed operation
    auditLogger.logSecurityEvent(
      AuditEventType.API_ERROR,
      AuditSeverity.HIGH,
      undefined,
      undefined,
      { endpoint: '/api/progress-metrics', method: 'GET', error: errorMessage }
    );
    
    return NextResponse.json({ ok: false, error: errorMessage }, { status: 400 });
  }
}

// Enhanced PUT handler with all improvements
async function PUTHandler(req: Request) {
  try {
    const supabase = await createRealSupabaseClient();
    
    const { data: { user }, error: authError } = await supabase.auth.getUser();
    if (authError || !user) {
      return NextResponse.json({ ok: false, error: 'Not authenticated' }, { status: 401 });
    }
    
    const { searchParams } = new URL(req.url);
    const id = searchParams.get('id');
    
    if (!id) {
      return NextResponse.json({ ok: false, error: 'id required' }, { status: 400 });
    }
    
    const body = await req.json();
    const data = await updateProgressMetric(supabase, user, id, body);
    
    // Log successful data update
    auditLogger.logDataOperation(
      AuditEventType.DATA_UPDATE,
      user.id,
      user.email ?? 'unknown',
      'progress_metric',
      id,
      'update',
      { input: body, result: data }
    );
    
    // Clear related cache entries
    const { performanceMonitor } = await import('@/lib/performance-monitor');
    performanceMonitor.deleteCache(`progress_metric_${data.client_id}_${data.metric_date}`);
    performanceMonitor.deleteCache(`progress_metrics_${data.client_id}_30`);
    
    return NextResponse.json({ ok: true, data });
  } catch (err: unknown) {
    const errorMessage = err instanceof Error ? err.message : 'Unknown error occurred';
    
    // Log failed operation
    auditLogger.logSecurityEvent(
      AuditEventType.API_ERROR,
      AuditSeverity.HIGH,
      undefined,
      undefined,
      { endpoint: '/api/progress-metrics', method: 'PUT', error: errorMessage }
    );
    
    return NextResponse.json({ ok: false, error: errorMessage }, { status: 400 });
  }
}

// Enhanced DELETE handler with all improvements
async function DELETEHandler(req: Request) {
  try {
    const supabase = await createRealSupabaseClient();
    
    const { data: { user }, error: authError } = await supabase.auth.getUser();
    if (authError || !user) {
      return NextResponse.json({ ok: false, error: 'Not authenticated' }, { status: 401 });
    }
    
    const { searchParams } = new URL(req.url);
    const id = searchParams.get('id');
    
    if (!id) {
      return NextResponse.json({ ok: false, error: 'id required' }, { status: 400 });
    }
    
    // Get the metric before deletion for audit logging
    const metric = await getProgressMetricById(supabase, user, id);
    
    await deleteProgressMetric(supabase, user, id);
    
    // Log successful data deletion
    if (metric) {
      auditLogger.logDataOperation(
        AuditEventType.DATA_DELETE,
        user.id,
        user.email ?? 'unknown',
        'progress_metric',
        id,
        'delete',
        { deletedMetric: metric }
      );
      
      // Clear related cache entries
      const { performanceMonitor } = await import('@/lib/performance-monitor');
      performanceMonitor.deleteCache(`progress_metric_${metric.client_id}_${metric.metric_date}`);
      performanceMonitor.deleteCache(`progress_metrics_${metric.client_id}_30`);
    }
    
    return NextResponse.json({ ok: true, message: 'Progress metric deleted' });
  } catch (err: unknown) {
    const errorMessage = err instanceof Error ? err.message : 'Unknown error occurred';
    
    // Log failed operation
    auditLogger.logSecurityEvent(
      AuditEventType.API_ERROR,
      AuditSeverity.HIGH,
      undefined,
      undefined,
      { endpoint: '/api/progress-metrics', method: 'DELETE', error: errorMessage }
    );
    
    return NextResponse.json({ ok: false, error: errorMessage }, { status: 400 });
  }
}

// Export handlers with all Hero System improvements
export const POST = withRateLimit(withAuditLog(withPerformanceMonitoring(POSTHandler)));
export const GET = withRateLimit(withAuditLog(withPerformanceMonitoring(GETHandler)));
export const PUT = withRateLimit(withAuditLog(withPerformanceMonitoring(PUTHandler)));
export const DELETE = withRateLimit(withAuditLog(withPerformanceMonitoring(DELETEHandler)));
