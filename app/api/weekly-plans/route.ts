
/**
 * Weekly Plans API Route
 * Generated by Cursor AI
 * 
 * Handles CRUD operations for weekly plans including creation, updates, and retrieval
 * Uses existing weekly-plans.repo functions for data operations
 * 
 * Generated at: [RELATIVE: 7 months from now]
 */

import { NextResponse } from 'next/server';
import { 
  upsertWeeklyPlan, 
  getWeeklyPlan, 
  listClientWeeklyPlans,
  getWeeklyPlanById,
  updateWeeklyPlan,
  deleteWeeklyPlan,
  getWeeklyPlanByDate,
  listCoachClients
} from '@/data/weekly-plans.repo';
import { createRealSupabaseClient } from '@/lib/supabase/server';

// Prevent prerendering - this route must be dynamic
export const dynamic = 'force-dynamic';
export const revalidate = 0;

export async function POST(req: Request) {
  try {
    const supabase = await createRealSupabaseClient();
    
    // Get user from Supabase directly
    const { data: { user }, error: authError } = await supabase.auth.getUser();
    if (authError || !user) {
      return NextResponse.json({ ok: false, error: 'Not authenticated' }, { status: 401 });
    }
    
    const body = await req.json();
    const data = await upsertWeeklyPlan(supabase, user, body);
    return NextResponse.json({ ok: true, data });
  } catch (err: unknown) {
    const errorMessage = err instanceof Error ? err.message : 'Unknown error occurred';
    return NextResponse.json({ ok: false, error: errorMessage }, { status: 400 });
  }
}

export async function GET(req: Request) {
  try {
    const supabase = await createRealSupabaseClient();
    
    const { searchParams } = new URL(req.url);
    const client_id = searchParams.get('client_id');
    const week = searchParams.get('week');
    const id = searchParams.get('id');
    const date = searchParams.get('date');
    
    if (id) {
      // Get specific plan by ID
      const { data: { user }, error: authError } = await supabase.auth.getUser();
      if (authError || !user) {
        return NextResponse.json({ ok: false, error: 'Not authenticated' }, { status: 401 });
      }
      
      const data = await getWeeklyPlanById(supabase, user, id);
      return NextResponse.json({ ok: true, data });
    }
    
    if (date) {
      // Get plans by date
      const { data: { user }, error: authError } = await supabase.auth.getUser();
      if (authError || !user) {
        return NextResponse.json({ ok: false, error: 'Not authenticated' }, { status: 401 });
      }
      
      const data = await getWeeklyPlanByDate(supabase, user, date);
      return NextResponse.json({ ok: true, data });
    }
    
    if (client_id && week) {
      // Get plan for specific client and week
      const data = await getWeeklyPlan(supabase, client_id, week);
      return NextResponse.json({ ok: true, data });
    }
    
    if (client_id) {
      // List plans for specific client
      const data = await listClientWeeklyPlans(supabase, client_id);
      return NextResponse.json({ ok: true, data });
    }
    
    // List coach's clients (for plan management)
    const { data: { user }, error: authError } = await supabase.auth.getUser();
    if (authError || !user) {
      return NextResponse.json({ ok: false, error: 'Not authenticated' }, { status: 401 });
    }
    
    const data = await listCoachClients(supabase, user);
    return NextResponse.json({ ok: true, data });
  } catch (err: unknown) {
    const errorMessage = err instanceof Error ? err.message : 'Unknown error occurred';
    return NextResponse.json({ ok: false, error: errorMessage }, { status: 400 });
  }
}

export async function PUT(req: Request) {
  try {
    const supabase = await createRealSupabaseClient();
    
    const { data: { user }, error: authError } = await supabase.auth.getUser();
    if (authError || !user) {
      return NextResponse.json({ ok: false, error: 'Not authenticated' }, { status: 401 });
    }
    
    const { searchParams } = new URL(req.url);
    const id = searchParams.get('id');
    
    if (!id) {
      return NextResponse.json({ ok: false, error: 'id required' }, { status: 400 });
    }
    
    const body = await req.json();
    const data = await updateWeeklyPlan(supabase, user, id, body);
    return NextResponse.json({ ok: true, data });
  } catch (err: unknown) {
    const errorMessage = err instanceof Error ? err.message : 'Unknown error occurred';
    return NextResponse.json({ ok: false, error: errorMessage }, { status: 400 });
  }
}

export async function DELETE(req: Request) {
  try {
    const supabase = await createRealSupabaseClient();
    
    const { data: { user }, error: authError } = await supabase.auth.getUser();
    if (authError || !user) {
      return NextResponse.json({ ok: false, error: 'Not authenticated' }, { status: 401 });
    }
    
    const { searchParams } = new URL(req.url);
    const id = searchParams.get('id');
    
    if (!id) {
      return NextResponse.json({ ok: false, error: 'id required' }, { status: 400 });
    }
    
    await deleteWeeklyPlan(supabase, user, id);
    return NextResponse.json({ ok: true, message: 'Weekly plan deleted' });
  } catch (err: unknown) {
    const errorMessage = err instanceof Error ? err.message : 'Unknown error occurred';
    return NextResponse.json({ ok: false, error: errorMessage }, { status: 400 });
  }
}
