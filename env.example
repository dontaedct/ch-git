# =============================================================================
# DCT MICRO-APPS ENVIRONMENT CONFIGURATION - Phase 1, Task 2
# =============================================================================
# 
# üîß SETUP INSTRUCTIONS:
# 1. Copy this file to .env.local and fill in your actual values
# 2. Run `npm run env:doctor` to check your configuration
# 3. Never commit .env.local or any file containing real secrets
# 
# üè• HEALTH CHECK: Run `npm run env:doctor` for comprehensive diagnostics
# üîí SECURITY: NEXT_PUBLIC_* variables are exposed to the client - use with caution
# ‚ö†Ô∏è  WARN-BUT-RUN: Missing secrets will use placeholders and disable features gracefully
# 
# Generated at: 2025-08-29T15:10:31.507Z

# =============================================================================
# üèóÔ∏è CORE APPLICATION CONFIGURATION
# =============================================================================

# Application Environment
# Scope: server | Security: PUBLIC | Required: YES
# Purpose: Runtime environment detection | Used in: lib/env.ts, next.config.ts
# Values: development | test | production
NODE_ENV=development

# Development Server Port
# Scope: server | Security: PUBLIC | Required: NO
# Purpose: Development server port | Used in: scripts/dev-bootstrap.mjs
# Default: 3000 | Range: 1-65535
PORT=3000

# Application Tier (Feature Management)
# Scope: server | Security: PUBLIC | Required: NO  
# Purpose: Controls which features are available | Used in: lib/flags.ts
# Values: starter | pro | advanced
APP_TIER=starter

# =============================================================================
# üóÑÔ∏è SUPABASE DATABASE CONFIGURATION
# =============================================================================

# Supabase Project URL (Public)
# Scope: client | Security: PUBLIC | Required: YES
# Purpose: Database connection URL | Used in: lib/env.ts, lib/supabase/*
# Example: https://your-project.supabase.co
# ‚ö†Ô∏è Exposed to client - ensure it's your intended public URL
NEXT_PUBLIC_SUPABASE_URL=https://your-project.supabase.co

# Supabase Anonymous Key (Public)  
# Scope: client | Security: PUBLIC | Required: YES
# Purpose: Client-side database access | Used in: lib/env.ts, lib/supabase/*
# ‚ö†Ô∏è Exposed to client - this should be your anon key, not service role
NEXT_PUBLIC_SUPABASE_ANON_KEY=your_anon_key_here

# Supabase Service Role Key (Server Only)
# Scope: server | Security: CRITICAL | Required: YES (for admin operations)
# Purpose: Server-side database operations | Used in: lib/env.ts, scripts/guardian.*
# üîí NEVER expose this to the client - server-side only
# Feature Impact: Admin operations will be disabled if missing
SUPABASE_SERVICE_ROLE_KEY=your_service_role_key_here

# Supabase Database URL (Server Only) 
# Scope: server | Security: CRITICAL | Required: NO
# Purpose: Direct database connection for scripts | Used in: scripts/guardian.*
# Format: postgresql://postgres:password@host:port/database
SUPABASE_DB_URL=postgresql://postgres:password@localhost:54322/postgres

# =============================================================================
# üìß EMAIL SERVICES (RESEND)
# =============================================================================

# Resend API Key (Server Only)
# Scope: server | Security: PRIVATE | Required: NO
# Purpose: Email sending service | Used in: lib/email.ts
# Feature Impact: Email functionality will be disabled if missing
# Get your key at: https://resend.com/api-keys
RESEND_API_KEY=your_resend_api_key_here

# Resend From Address (Server Only)
# Scope: server | Security: PRIVATE | Required: NO  
# Purpose: Default sender email address | Used in: lib/email.ts
# Format: Name <email@yourdomain.com>
# ‚ö†Ô∏è Must be a verified domain in Resend
RESEND_FROM=Micro App <no-reply@yourdomain.com>

# =============================================================================
# üîç MONITORING & ERROR TRACKING (SENTRY)
# =============================================================================

# Sentry DSN (Server Only)
# Scope: server | Security: PRIVATE | Required: NO
# Purpose: Server-side error tracking | Used in: sentry.server.config.ts
# Feature Impact: Server error tracking will be disabled if missing
# Get your DSN at: https://sentry.io/settings/projects/
SENTRY_DSN=https://your-sentry-dsn@sentry.io/project-id

# Sentry DSN (Public)
# Scope: client | Security: PUBLIC | Required: NO
# Purpose: Client-side error tracking | Used in: sentry.client.config.ts
# ‚ö†Ô∏è Exposed to client - use client-side DSN, not server DSN
NEXT_PUBLIC_SENTRY_DSN=https://your-sentry-dsn@sentry.io/project-id

# =============================================================================
# üìä OBSERVABILITY & MONITORING (OpenTelemetry + Pino)
# =============================================================================

# Observability Enabled (Server Only)
# Scope: server | Security: PUBLIC | Required: NO
# Purpose: Enable/disable entire observability stack | Used in: lib/observability/config.ts
# Values: true | false | Default: true
OBSERVABILITY_ENABLED=true

# Tracing Enabled (Server Only)
# Scope: server | Security: PUBLIC | Required: NO
# Purpose: Enable OpenTelemetry distributed tracing | Used in: lib/observability/config.ts
# Values: true | false | Default: true
TRACING_ENABLED=true

# OpenTelemetry Service Name (Server Only)
# Scope: server | Security: PUBLIC | Required: NO
# Purpose: Service name for tracing and metrics | Used in: lib/observability/otel.ts
# Default: dct-micro-app
OTEL_SERVICE_NAME=dct-micro-app

# OpenTelemetry Service Version (Server Only)
# Scope: server | Security: PUBLIC | Required: NO
# Purpose: Service version for tracing and metrics | Used in: lib/observability/otel.ts
# Default: auto-detected from package.json
OTEL_SERVICE_VERSION=0.2.0

# Tracing Sample Rate (Server Only)
# Scope: server | Security: PUBLIC | Required: NO
# Purpose: Percentage of requests to trace (0.0-1.0) | Used in: lib/observability/config.ts
# Default: 1.0 (dev), 0.1 (prod) | Range: 0.0-1.0
TRACING_SAMPLE_RATE=1.0

# Jaeger Endpoint (Development Only)
# Scope: server | Security: PRIVATE | Required: NO
# Purpose: Jaeger collector endpoint for local tracing | Used in: lib/observability/otel.ts
# Example: http://localhost:14268/api/traces
# Feature Impact: Jaeger tracing will be disabled if missing
JAEGER_ENDPOINT=http://localhost:14268/api/traces

# OTLP Traces Endpoint (Production)
# Scope: server | Security: PRIVATE | Required: NO
# Purpose: OTLP traces endpoint for production tracing | Used in: lib/observability/otel.ts
# Examples:
# - Honeycomb: https://api.honeycomb.io/v1/traces
# - DataDog: https://trace.agent.datadoghq.com/v0.4/traces
# - New Relic: https://trace-api.newrelic.com/trace/v1
OTEL_EXPORTER_OTLP_TRACES_ENDPOINT=https://api.honeycomb.io/v1/traces

# OTLP Headers (Production)
# Scope: server | Security: PRIVATE | Required: NO
# Purpose: Headers for OTLP endpoint authentication | Used in: lib/observability/otel.ts
# Format: JSON string with headers
# Examples:
# - Honeycomb: {"x-honeycomb-team":"your-api-key"}
# - DataDog: {"DD-API-KEY":"your-api-key"}
# - New Relic: {"api-key":"your-license-key"}
OTEL_EXPORTER_OTLP_HEADERS={"x-honeycomb-team":"your-api-key"}

# Metrics Enabled (Server Only)
# Scope: server | Security: PUBLIC | Required: NO
# Purpose: Enable metrics collection | Used in: lib/observability/config.ts
# Values: true | false | Default: true
METRICS_ENABLED=true

# Prometheus Port (Server Only)
# Scope: server | Security: PUBLIC | Required: NO
# Purpose: Port for Prometheus metrics server | Used in: lib/observability/otel.ts
# Default: 9090 | Range: 1-65535
PROMETHEUS_PORT=9090

# Prometheus Endpoint (Server Only)
# Scope: server | Security: PUBLIC | Required: NO
# Purpose: Prometheus metrics endpoint path | Used in: lib/observability/config.ts
# Default: /metrics
PROMETHEUS_ENDPOINT=/metrics

# Business Metrics Enabled (Server Only)
# Scope: server | Security: PUBLIC | Required: NO
# Purpose: Enable business metrics collection | Used in: lib/observability/config.ts
# Values: true | false | Default: true
BUSINESS_METRICS_ENABLED=true

# Collect User Metrics (Server Only)
# Scope: server | Security: PUBLIC | Required: NO
# Purpose: Collect user interaction metrics | Used in: lib/observability/config.ts
# Values: true | false | Default: true
COLLECT_USER_METRICS=true

# Collect Security Metrics (Server Only)
# Scope: server | Security: PUBLIC | Required: NO
# Purpose: Collect security event metrics | Used in: lib/observability/config.ts
# Values: true | false | Default: true
COLLECT_SECURITY_METRICS=true

# Collect Performance Metrics (Server Only)
# Scope: server | Security: PUBLIC | Required: NO
# Purpose: Collect performance metrics | Used in: lib/observability/config.ts
# Values: true | false | Default: true
COLLECT_PERFORMANCE_METRICS=true

# Log Level (Server Only)
# Scope: server | Security: PUBLIC | Required: NO
# Purpose: Minimum log level for structured logging | Used in: lib/logger.ts
# Values: debug | info | warn | error | fatal | Default: debug (dev), info (prod)
LOG_LEVEL=debug

# Log Structured (Server Only)
# Scope: server | Security: PUBLIC | Required: NO
# Purpose: Use structured JSON logging | Used in: lib/observability/config.ts
# Values: true | false | Default: true
LOG_STRUCTURED=true

# Log Redact Sensitive Data (Server Only)
# Scope: server | Security: PUBLIC | Required: NO
# Purpose: Redact sensitive data in logs | Used in: lib/observability/config.ts
# Values: true | false | Default: true
LOG_REDACT_SENSITIVE=true

# Log Include Trace ID (Server Only)
# Scope: server | Security: PUBLIC | Required: NO
# Purpose: Include trace ID in log entries | Used in: lib/observability/config.ts
# Values: true | false | Default: true
LOG_INCLUDE_TRACE_ID=true

# Profiling Enabled (Server Only)
# Scope: server | Security: PUBLIC | Required: NO
# Purpose: Enable performance profiling | Used in: lib/observability/config.ts
# Values: true | false | Default: true
PROFILING_ENABLED=true

# Profiling Sample Rate (Server Only)
# Scope: server | Security: PUBLIC | Required: NO
# Purpose: Percentage of operations to profile (0.0-1.0) | Used in: lib/observability/config.ts
# Default: 1.0 (dev), 0.01 (prod) | Range: 0.0-1.0
PROFILING_SAMPLE_RATE=1.0

# Profile Memory (Server Only)
# Scope: server | Security: PUBLIC | Required: NO
# Purpose: Enable memory profiling | Used in: lib/observability/config.ts
# Values: true | false | Default: true
PROFILE_MEMORY=true

# Profile CPU (Server Only)
# Scope: server | Security: PUBLIC | Required: NO
# Purpose: Enable CPU profiling | Used in: lib/observability/config.ts
# Values: true | false | Default: true
PROFILE_CPU=true

# Monitoring Interval (Server Only)
# Scope: server | Security: PUBLIC | Required: NO
# Purpose: System monitoring interval in milliseconds | Used in: lib/observability/config.ts
# Default: 30000 (30s) | Range: 10000-300000 (10s-5min)
MONITORING_INTERVAL=30000

# Slow Request Threshold (Server Only)
# Scope: server | Security: PUBLIC | Required: NO
# Purpose: Slow request threshold in milliseconds | Used in: lib/observability/config.ts
# Default: 2000 (2s) | Range: 100-10000 (100ms-10s)
SLOW_REQUEST_THRESHOLD=2000

# High Memory Threshold (Server Only)
# Scope: server | Security: PUBLIC | Required: NO
# Purpose: High memory usage threshold in MB | Used in: lib/observability/config.ts
# Default: 512 (512MB) | Range: 100-2048 (100MB-2GB)
HIGH_MEMORY_THRESHOLD=512

# Error Rate Threshold (Server Only)
# Scope: server | Security: PUBLIC | Required: NO
# Purpose: Error rate alert threshold (0.0-1.0) | Used in: lib/observability/config.ts
# Default: 0.05 (5%) | Range: 0.0-1.0
ERROR_RATE_THRESHOLD=0.05

# Log Security Events (Server Only)
# Scope: server | Security: PUBLIC | Required: NO
# Purpose: Log security events | Used in: lib/observability/config.ts
# Values: true | false | Default: true
LOG_SECURITY_EVENTS=true

# Track Rate Limit Violations (Server Only)
# Scope: server | Security: PUBLIC | Required: NO
# Purpose: Track rate limit violations | Used in: lib/observability/config.ts
# Values: true | false | Default: true
TRACK_RATE_LIMIT_VIOLATIONS=true

# Track Authentication Failures (Server Only)
# Scope: server | Security: PUBLIC | Required: NO
# Purpose: Track authentication failures | Used in: lib/observability/config.ts
# Values: true | false | Default: true
TRACK_AUTH_FAILURES=true

# Sensitive Data Masking (Server Only)
# Scope: server | Security: PUBLIC | Required: NO
# Purpose: Mask sensitive data in logs | Used in: lib/observability/config.ts
# Values: true | false | Default: true
SENSITIVE_DATA_MASKING=true

# =============================================================================
# üí≥ PAYMENT PROCESSING (STRIPE) 
# =============================================================================

# Stripe Secret Key (Server Only)
# Scope: server | Security: CRITICAL | Required: NO
# Purpose: Payment processing | Used in: app/api/stripe/*
# Feature Impact: Payment processing will be disabled if missing
# üîí Use sk_live_ for production, sk_test_ for development
# Get your keys at: https://dashboard.stripe.com/apikeys
STRIPE_SECRET_KEY=sk_test_your_stripe_secret_key_here

# Stripe Publishable Key (Public)
# Scope: client | Security: PUBLIC | Required: NO
# Purpose: Client-side payment forms | Used in: components/payment/*
# ‚ö†Ô∏è Exposed to client - use pk_live_ for production, pk_test_ for development
NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=pk_test_your_stripe_publishable_key_here

# Stripe Webhook Secret (Server Only)
# Scope: server | Security: CRITICAL | Required: NO
# Purpose: Webhook signature verification | Used in: app/api/webhooks/stripe/*
# Feature Impact: Payment webhooks will be disabled if missing
# Get from: https://dashboard.stripe.com/webhooks
STRIPE_WEBHOOK_SECRET=whsec_your_webhook_secret_here

# =============================================================================
# ü§ñ AUTOMATION & WORKFLOWS (N8N)
# =============================================================================

# n8n Webhook URL (Server Only)
# Scope: server | Security: PRIVATE | Required: NO
# Purpose: Workflow automation triggers | Used in: app/api/webhooks/*
# Feature Impact: Workflow automation will be disabled if missing
# üîí Ensure this URL is secure and not publicly accessible
N8N_WEBHOOK_URL=https://your-n8n-instance.com/webhook/your-webhook-id

# n8n Webhook Secret (Server Only)
# Scope: server | Security: PRIVATE | Required: NO
# Purpose: HMAC signing for webhook security | Used in: lib/webhooks/emitter.ts
# üí° Generate a strong random string for HMAC signature verification
N8N_WEBHOOK_SECRET=your_webhook_hmac_secret_here

# n8n Webhook Timeout (Server Only)
# Scope: server | Security: PUBLIC | Required: NO
# Purpose: Request timeout in milliseconds | Used in: lib/config/webhooks.ts
# Default: 10000 | Range: 1000-300000 (1s-5min)
N8N_WEBHOOK_TIMEOUT=10000

# n8n Webhook Max Retries (Server Only)
# Scope: server | Security: PUBLIC | Required: NO
# Purpose: Maximum retry attempts with exponential backoff | Used in: lib/config/webhooks.ts
# Default: 3 | Range: 0-10
N8N_WEBHOOK_MAX_RETRIES=3

# =============================================================================
# üîî NOTIFICATIONS & ALERTS
# =============================================================================

# Slack Webhook URL (Server Only)
# Scope: server | Security: PRIVATE | Required: NO
# Purpose: Slack notifications and alerts | Used in: app/api/notifications/*  
# Feature Impact: Slack notifications will be disabled if missing
# Get from: https://api.slack.com/messaging/webhooks
SLACK_WEBHOOK_URL=https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK

# =============================================================================
# üöÄ CI/CD & DEPLOYMENT
# =============================================================================

# GitHub Token (Server Only)
# Scope: server | Security: PRIVATE | Required: NO
# Purpose: GitHub API access for CI/CD | Used in: scripts/ci/*
# Get from: https://github.com/settings/tokens
# Permissions needed: repo, workflow
GITHUB_TOKEN=ghp_your_github_token_here

# GitHub Repository (Server Only)
# Scope: server | Security: PUBLIC | Required: NO
# Purpose: Repository identification for CI/CD | Used in: scripts/ci/*
# Format: owner/repository-name
GITHUB_REPO=your-org/your-repo

# =============================================================================
# üõ†Ô∏è DEVELOPMENT & DEBUGGING
# =============================================================================

# Debug Mode (Public)
# Scope: client | Security: PUBLIC | Required: NO
# Purpose: Enable debug logging in development | Used in: lib/env-client.ts
# Values: true | false | 1 | 0
NEXT_PUBLIC_DEBUG=false

# Safe Mode (Public)
# Scope: client | Security: PUBLIC | Required: NO  
# Purpose: Enable safe mode features | Used in: lib/env-client.ts
# Values: true | false | 1 | 0
NEXT_PUBLIC_SAFE_MODE=false

# AI Live Mode (Public)
# Scope: client | Security: PUBLIC | Required: NO
# Purpose: Enable AI live features | Used in: lib/env-client.ts
# Values: true | false | 1 | 0
NEXT_PUBLIC_ENABLE_AI_LIVE=false

# Auto-fix Mode (Development Only)
# Scope: server | Security: PUBLIC | Required: NO
# Purpose: Enable automatic fixes in scripts | Used in: scripts/doctor.ts
# Values: true | false | 1 | 0
AUTO=false

# =============================================================================
# üîí SECURITY & CRON JOBS
# =============================================================================

# Cron Secret (Server Only)
# Scope: server | Security: PRIVATE | Required: NO
# Purpose: Secure cron job execution | Used in: app/api/cron/*
# üí° Generate a strong random string (32+ characters)
CRON_SECRET=your_secure_cron_secret_here

# =============================================================================
# ‚òÅÔ∏è DEPLOYMENT PLATFORM
# =============================================================================

# Vercel Environment (Auto-set by Vercel)
# Scope: client | Security: PUBLIC | Required: NO
# Purpose: Deployment environment detection | Used in: lib/env-client.ts
# Values: development | preview | production
# ‚ÑπÔ∏è This is automatically set by Vercel - no need to configure manually
NEXT_PUBLIC_VERCEL_ENV=development

# =============================================================================
# üîß OPTIONAL PERFORMANCE & MONITORING
# =============================================================================

# Feature Flags Enabled
# Scope: server | Security: PUBLIC | Required: NO
# Purpose: Enable/disable feature flag system | Used in: lib/flags.ts
# Values: true | false
FEATURE_FLAGS_ENABLED=true

# UI Polish Target Style (Swift-Inspired Aesthetic)
# Scope: client | Security: PUBLIC | Required: NO
# Purpose: Enable Swift-inspired UI polish with dark-first theme | Used in: components/ui/*
# Values: true | false | 1 | 0
NEXT_PUBLIC_FEATURE_UI_POLISH_TARGET_STYLE=0

# Performance Monitoring Enabled
# Scope: server | Security: PUBLIC | Required: NO
# Purpose: Enable performance monitoring | Used in: lib/env.ts
# Values: true | false
PERFORMANCE_MONITORING_ENABLED=false

# Health Check Enabled
# Scope: server | Security: PUBLIC | Required: NO
# Purpose: Enable health check endpoints | Used in: lib/env.ts
# Values: true | false
HEALTH_CHECK_ENABLED=true

# CI Environment (Auto-set by CI)
# Scope: server | Security: PUBLIC | Required: NO
# Purpose: CI environment detection | Used in: package.json, scripts/*
# ‚ÑπÔ∏è This is automatically set by CI systems - no need to configure manually
CI=false

# =============================================================================
# üîê ENVIRONMENT ENCRYPTION (OPTIONAL)
# =============================================================================

# Master Password for Environment Encryption
# Scope: server | Security: CRITICAL | Required: NO
# Purpose: Decrypt encrypted environment variables | Used in: lib/env-encryption.ts
# üí° Only needed if using encrypted environment variables
# üîí Store this securely - losing it means losing access to encrypted values
# ENV_MASTER_PASSWORD=your_very_secure_master_password_here

# Development Master Password (Development Only)
# Scope: server | Security: PRIVATE | Required: NO
# Purpose: Development environment encryption | Used in: lib/env-encryption.ts
# ENV_MASTER_PASSWORD_DEV=development-only-password

# =============================================================================
# üìö CONFIGURATION REFERENCE
# =============================================================================

# üîç DIAGNOSTICS:
# - Run `npm run env:doctor` for comprehensive environment diagnostics
# - Run `npm run env:doctor --help` for all available options
# - Run `npm run env:doctor --json` for machine-readable output

# üìä FEATURE TIERS:
# - STARTER: Basic database, email, health checks, safe mode
# - PRO: Adds payments, webhooks, notifications, error tracking, performance monitoring
# - ADVANCED: Adds automation, admin operations, AI features, debug mode

# üîí SECURITY LEVELS:
# - PUBLIC: Safe for client exposure (NEXT_PUBLIC_* variables)
# - PRIVATE: Server-only, moderately sensitive (API keys, URLs)
# - CRITICAL: Server-only, highly sensitive (database credentials, webhook secrets)

# ‚ö†Ô∏è PRODUCTION SECURITY CHECKLIST:
# ‚ñ° All CRITICAL and PRIVATE variables are set to real values (not placeholders)
# ‚ñ° No test keys (sk_test_, pk_test_) in production
# ‚ñ° All URLs use HTTPS in production
# ‚ñ° Webhook secrets are strong and unique
# ‚ñ° Cron secrets are strong and unique (32+ characters)
# ‚ñ° Master passwords are stored securely (not in environment files)
# ‚ñ° No placeholder values in production

# üîÑ REGULAR MAINTENANCE:
# ‚ñ° Rotate secrets regularly (quarterly recommended)
# ‚ñ° Monitor for placeholder usage with `npm run env:doctor`
# ‚ñ° Review and update tier configuration as needed
# ‚ñ° Test environment in different configurations
# ‚ñ° Keep .env.example updated with new variables

# =============================================================================
# END OF CONFIGURATION
# =============================================================================