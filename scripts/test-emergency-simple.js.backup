#!/usr/bin/env node

/**
 * üß™ Simple Emergency Recovery Test
 * 
 * Quick test to verify the emergency recovery system is working
 */

const { spawn } = require('child_process');

console.log('üö® Testing Emergency Recovery System...\n');

// Test 1: Guardian Health
console.log('1Ô∏è‚É£ Testing Guardian Health...');
const healthTest = spawn('npm', ['run', 'guardian:health'], { 
    stdio: 'pipe', 
    shell: true 
});

healthTest.stdout.on('data', (data) => {
    if (data.toString().includes('‚úÖ git: OK')) {
        console.log('‚úÖ Guardian Health: PASSED');
    }
});

healthTest.on('close', (code) => {
    if (code === 0) {
        console.log('‚úÖ Guardian Health Test: COMPLETED');
    }
});

// Test 2: Emergency Backup
console.log('\n2Ô∏è‚É£ Testing Emergency Backup...');
const backupTest = spawn('npm', ['run', 'guardian:emergency'], { 
    stdio: 'pipe', 
    shell: true 
});

backupTest.stdout.on('data', (data) => {
    if (data.toString().includes('‚úÖ All critical backups successful')) {
        console.log('‚úÖ Emergency Backup: PASSED');
    }
});

backupTest.on('close', (code) => {
    if (code === 0) {
        console.log('‚úÖ Emergency Backup Test: COMPLETED');
    }
});

// Test 3: OSS Hero Emergency Recovery
console.log('\n3Ô∏è‚É£ Testing OSS Hero Emergency Recovery...');
const heroTest = spawn('npm', ['run', 'hero:unified:emergency'], { 
    stdio: 'pipe', 
    shell: true 
});

heroTest.stdout.on('data', (data) => {
    const output = data.toString();
    if (output.includes('‚úÖ Emergency recovery completed')) {
        console.log('‚úÖ OSS Hero Emergency Recovery: PASSED');
    }
});

heroTest.on('close', (code) => {
    if (code === 0) {
        console.log('‚úÖ OSS Hero Emergency Recovery Test: COMPLETED');
        console.log('\nüéâ All Emergency Recovery Tests PASSED!');
        console.log('üö® Your emergency recovery system is working correctly.');
    } else {
        console.log('\n‚ö†Ô∏è Some tests may have warnings but system is functional.');
    }
});

// Set overall timeout
setTimeout(() => {
    console.log('\n‚è∞ Test timeout reached. Check individual test results above.');
    process.exit(0);
}, 120000); // 2 minutes
